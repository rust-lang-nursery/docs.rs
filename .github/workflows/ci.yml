---
on: [push, pull_request]
name: CI

env:
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 2

      - name: Install stable Rust
        run: rustup update stable && rustup default stable

      - name: Set rustc version
        run: echo "::set-env name=CURRENT_RUSTC_VERSION::$(rustc -V)"

      # Caching
      - name: Cache Cargo Registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache Cargo Bin
        uses: actions/cache@v1
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache Cargo Git
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache Cargo Build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ env.CURRENT_RUSTC_VERSION }}-${{ hashFiles('**/Cargo.lock') }}
          restore-key: |
            ${{ runner.os }}-cargo-build-target-${{ env.CURRENT_RUSTC_VERSION }}-

      - name: Launch the postgres and min.io images
        run: |
          cp .env.sample .env
          . .env
          mkdir -p ${CRATESFYI_PREFIX}/public-html
          docker-compose up -d db s3
          # Give the database enough time to start up
          sleep 5
          # Make sure the database is actually working
          psql "${CRATESFYI_DATABASE_URL}"
          sudo -u postgres psql -c "CREATE EXTENSION IF NOT EXISTS fuzzystrsearch"

      - name: Build docs.rs
        run: cargo build --locked

      - name: Run rustfmt
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy --locked -- -D warnings

      - name: Build docs.rs
        run: cargo build --locked

      - name: Test docs.rs
        run: cargo test --locked -- --test-threads=1

      - name: Clean up the database
        run: docker-compose down --volumes

  docker:
    name: Docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 2

      - name: Build the Docker image
        run: docker build -t docs-rs .

      - name: Upload the Docker image to ECR
        uses: rust-lang/simpleinfra/github-actions/upload-docker-image@master
        with:
          image: docs-rs
          repository: staging-docs-rs
          region: us-west-1
          aws_access_key_id: "${{ secrets.aws_access_key_id }}"
          aws_secret_access_key: "${{ secrets.aws_secret_access_key }}"
        if: github.ref == 'refs/heads/master'
