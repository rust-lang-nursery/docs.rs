# Ref: https://aka.ms/yaml

resources:
  containers:
  - container: debian-jessie
    image: onuras/docs.rs:debian-jessie
  - container: debian-stretch
    image: onuras/docs.rs:debian-stretch


jobs:
- job: test
  pool:
    vmImage: 'Ubuntu 16.04'
  strategy:
    matrix:
      jessie:
        containerResource: debian-jessie
      stretch:
        containerResource: debian-stretch
  container: $[ variables['containerResource'] ]
  steps:
    - script: curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
      displayName: 'Install rustc'
    - script: |
        . "$HOME"/.cargo/env
        rustup component add rustfmt
        cargo fmt --all -- --check
        cargo build --verbose
      displayName: 'Build docs.rs'
    - script: |
        . "$HOME"/.cargo/env
        cargo test --verbose -- --test-threads=1
      displayName: 'Test docs.rs'


- job: release
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  pool:
    vmImage: 'Ubuntu 16.04'
  strategy:
    matrix:
      jessie:
        containerResource: debian-jessie
      stretch:
        containerResource: debian-stretch
  container: $[ variables['containerResource'] ]
  steps:
    - script: curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
      displayName: 'Install rustc'
    - script: |
        . "$HOME"/.cargo/env
        cargo build --verbose --release
      displayName: 'Build docs.rs'
    - task: CopyFiles@2
      inputs:
        contents: '$(System.DefaultWorkingDirectory)/templates/**'
        targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: 'Copy templates'
    - task: CopyFiles@2
      inputs:
        contents: '$(System.DefaultWorkingDirectory)/target/release/cratesfyi'
        targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: 'Copy build'
    - task: PublishBuildArtifacts@1
      inputs:
        artifactName: $(containerResource)
      displayName: 'Upload artifacts'


- job: deploy
  dependsOn:
    - test
    - release
  condition: succeeded()
  pool:
    vmImage: 'Ubuntu 16.04'
  container: debian-stretch
  steps:
    - checkout: none
    - task: DownloadBuildArtifacts@0
      inputs:
        artifactName: debian-jessie
        downloadPath: $(System.DefaultWorkingDirectory)
    - task: DownloadBuildArtifacts@0
      inputs:
        artifactName: debian-stretch
        downloadPath: $(System.DefaultWorkingDirectory)
    - task: DownloadSecureFile@1
      inputs:
        secureFile: docs.rs.ssh.private.key
    - script: tar czfv $(Build.BinariesDirectory)/$(Build.SourceVersion).tar.gz .
      displayName: 'Pack build'
    - script: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "$(docs.rs.ssh.hostname)" > ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        eval $(ssh-agent -s)
        cat $DOWNLOADSECUREFILE_SECUREFILEPATH | tr -d '\r' | ssh-add - > /dev/null
        scp -P $(docs.rs.ssh.port) $(Build.BinariesDirectory)/$(Build.SourceVersion).tar.gz $(docs.rs.ssh.destination):azure-deploys/
        ssh -p $(docs.rs.ssh.port) $(docs.rs.ssh.destination) azure-deploys/install-deploy.sh $(Build.SourceVersion)
      displayName: 'Upload build into docs.rs and run deploy script'
